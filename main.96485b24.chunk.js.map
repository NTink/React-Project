{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","list","error","errorMessage","currentPage","handleChange","bind","assertThisInitialized","handleCitySearch","_this2","react_default","a","createElement","className","type","name","onChange","placeholder","aria-label","onClick","restaurants","length","map","x","key","id","address","price","colSpan","e","parseInt","target","value","Array","numberofPages","fill","el","i","page","setState","fetch","concat","response","status","json","data","Math","ceil","total_entries","per_page","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96485b24.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component<any, any>  {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      input: '',\n      list: {} as any,\n      error: false,\n      errorMessage: '',\n      currentPage: 1\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCitySearch = this.handleCitySearch.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h4>Find the best Restaurants, Cafes & Cuisine in Your Place</h4>\n          <input type=\"text\" name=\"City\" onChange={this.handleChange} placeholder={`Please Enter City Name`} aria-label=\"Search bar\" /><button onClick={() => this.handleCitySearch(1)} aria-label=\"search button\">Search</button>\n          {this.state.list && this.state.list.restaurants && this.state.list.restaurants.length > 0 &&\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Address</th>\n                  <th>Price</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.list.restaurants && this.state.list.restaurants.map((x: any) => {\n                  return <tr key={x.id}>\n                    <td>{x.name}</td>\n                    <td>{x.address}</td>\n                    <td>{x.price}</td>\n                  </tr>\n                })\n                }\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td colSpan={3}>\n                    <select onChange={(e) => this.handleCitySearch(parseInt(e.target.value))} value={this.state.currentPage}>\n                      {Array(this.state.numberofPages).fill(1).map((el, i) =>\n                        <option key={i + 1} value={i + 1}>{i + 1}</option>\n                      )}\n                    </select>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          }\n          {\n            this.state.list && this.state.list.restaurants && this.state.list.restaurants.length === 0 &&\n            <div> No restaurants found </div>\n          }\n          {this.state.error && <div>{this.state.errorMessage}</div>}\n        </header>\n        <footer><small>All Rights Reserved Â© 2010 - 2019 Food Service.</small></footer>\n      </div>\n    );\n  }\n  private async handleCitySearch(page: number) {\n    if (!this.state.input) {\n      this.setState({ error: true, errorMessage: 'Please enter City Name' })\n    } else {\n      this.setState({ error: false, currentPage: page, list: {}, errorMessage: '' });\n\n      const response: Response = await fetch(`http://opentable.herokuapp.com/api/restaurants?city=${this.state.input}&per_page=15&page=${page}`);\n\n      if (response.status >= 200 && response.status < 300) {\n        let data = await response.json();\n        this.setState({ list: data, numberofPages: Math.ceil(data.total_entries / data.per_page) })\n      } else {\n        this.setState({ error: true, errorMessage: 'Error! Please contact Admin' })\n      }\n    }\n  }\n\n  private handleChange(e: any) {\n    this.setState({ input: e.target.value, error: false });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}